{"ast":null,"code":"var _s = $RefreshSig$();\n// components/useScrollSnap.js\nimport { useEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\ngsap.registerPlugin(ScrollToPlugin);\n\n/**\r\n * Smart scroll snapping hook.\r\n * Snaps to the nearest section after scrolling stops.\r\n */\nexport default function useScrollSnap({\n  selector = \"section\",\n  duration = 0.8,\n  threshold = 0.5,\n  // how far into a section before it snaps\n  deadZone = 0.2 // % of tall section to allow free scroll\n}) {\n  _s();\n  useEffect(() => {\n    let timeout;\n    let isAnimating = false;\n    const sections = Array.from(document.querySelectorAll(selector));\n    const scrollToY = y => {\n      isAnimating = true;\n      gsap.to(window, {\n        scrollTo: y,\n        duration,\n        ease: \"power2.out\",\n        onComplete: () => isAnimating = false\n      });\n    };\n    const onScroll = () => {\n      if (isAnimating) return; // don’t fight GSAP’s animation\n\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        const scrollY = window.scrollY;\n        const viewportHeight = window.innerHeight;\n        let snapTarget = null;\n        for (let i = 0; i < sections.length; i++) {\n          const el = sections[i];\n          const rect = el.getBoundingClientRect();\n          const elTop = rect.top + scrollY; // absolute\n          const elHeight = el.offsetHeight;\n          const elBottom = elTop + elHeight;\n          if (elHeight <= viewportHeight) {\n            // normal sections\n            if (scrollY + viewportHeight * threshold >= elTop && scrollY + viewportHeight * threshold < elBottom) {\n              snapTarget = elTop;\n              break;\n            }\n          } else {\n            // tall sections handling\n            const deadZoneTop = elTop + elHeight * deadZone;\n            const deadZoneBottom = elBottom - viewportHeight * deadZone;\n            if (scrollY < deadZoneTop) {\n              snapTarget = elTop; // near top\n              break;\n            } else if (scrollY > deadZoneBottom) {\n              if (sections[i + 1]) {\n                snapTarget = sections[i + 1].offsetTop;\n              }\n              break;\n            }\n            // else inside dead zone → no snap\n          }\n        }\n        if (snapTarget !== null) {\n          scrollToY(snapTarget);\n        }\n      }, 200); // wait for user to finish scrolling\n    };\n    window.addEventListener(\"scroll\", onScroll);\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [selector, duration, threshold, deadZone]);\n}\n_s(useScrollSnap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","gsap","ScrollToPlugin","registerPlugin","useScrollSnap","selector","duration","threshold","deadZone","_s","timeout","isAnimating","sections","Array","from","document","querySelectorAll","scrollToY","y","to","window","scrollTo","ease","onComplete","onScroll","clearTimeout","setTimeout","scrollY","viewportHeight","innerHeight","snapTarget","i","length","el","rect","getBoundingClientRect","elTop","top","elHeight","offsetHeight","elBottom","deadZoneTop","deadZoneBottom","offsetTop","addEventListener","removeEventListener"],"sources":["C:/Users/georg/projects/Fullstack/portofolio-2.0/client/src/components/useScrollSnap.js"],"sourcesContent":["// components/useScrollSnap.js\r\nimport { useEffect } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\r\n\r\ngsap.registerPlugin(ScrollToPlugin);\r\n\r\n/**\r\n * Smart scroll snapping hook.\r\n * Snaps to the nearest section after scrolling stops.\r\n */\r\nexport default function useScrollSnap({\r\n  selector = \"section\",\r\n  duration = 0.8,\r\n  threshold = 0.5,   // how far into a section before it snaps\r\n  deadZone = 0.2     // % of tall section to allow free scroll\r\n}) {\r\n  useEffect(() => {\r\n    let timeout;\r\n    let isAnimating = false;\r\n    const sections = Array.from(document.querySelectorAll(selector));\r\n\r\n    const scrollToY = (y) => {\r\n      isAnimating = true;\r\n      gsap.to(window, {\r\n        scrollTo: y,\r\n        duration,\r\n        ease: \"power2.out\",\r\n        onComplete: () => (isAnimating = false)\r\n      });\r\n    };\r\n\r\n    const onScroll = () => {\r\n      if (isAnimating) return; // don’t fight GSAP’s animation\r\n\r\n      if (timeout) clearTimeout(timeout);\r\n\r\n      timeout = setTimeout(() => {\r\n        const scrollY = window.scrollY;\r\n        const viewportHeight = window.innerHeight;\r\n\r\n        let snapTarget = null;\r\n\r\n        for (let i = 0; i < sections.length; i++) {\r\n          const el = sections[i];\r\n          const rect = el.getBoundingClientRect();\r\n          const elTop = rect.top + scrollY; // absolute\r\n          const elHeight = el.offsetHeight;\r\n          const elBottom = elTop + elHeight;\r\n\r\n          if (elHeight <= viewportHeight) {\r\n            // normal sections\r\n            if (\r\n              scrollY + viewportHeight * threshold >= elTop &&\r\n              scrollY + viewportHeight * threshold < elBottom\r\n            ) {\r\n              snapTarget = elTop;\r\n              break;\r\n            }\r\n          } else {\r\n            // tall sections handling\r\n            const deadZoneTop = elTop + elHeight * deadZone;\r\n            const deadZoneBottom = elBottom - viewportHeight * deadZone;\r\n\r\n            if (scrollY < deadZoneTop) {\r\n              snapTarget = elTop; // near top\r\n              break;\r\n            } else if (scrollY > deadZoneBottom) {\r\n              if (sections[i + 1]) {\r\n                snapTarget = sections[i + 1].offsetTop;\r\n              }\r\n              break;\r\n            }\r\n            // else inside dead zone → no snap\r\n          }\r\n        }\r\n\r\n        if (snapTarget !== null) {\r\n          scrollToY(snapTarget);\r\n        }\r\n      }, 200); // wait for user to finish scrolling\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => window.removeEventListener(\"scroll\", onScroll);\r\n  }, [selector, duration, threshold, deadZone]);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}