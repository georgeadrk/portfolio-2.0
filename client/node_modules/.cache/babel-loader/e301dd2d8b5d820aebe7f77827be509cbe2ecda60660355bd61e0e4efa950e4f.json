{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\georg\\\\projects\\\\Fullstack\\\\portofolio-2.0\\\\client\\\\src\\\\components\\\\TargetCursor.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback, useMemo } from 'react';\nimport { gsap } from 'gsap';\nimport './TargetCursor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TargetCursor = ({\n  targetSelector = '.cursor-target',\n  spinDuration = 2,\n  hideDefaultCursor = true\n}) => {\n  _s();\n  const cursorRef = useRef(null);\n  const cornersRef = useRef(null);\n  const spinTl = useRef(null);\n  const dotRef = useRef(null);\n  const constants = useMemo(() => ({\n    borderWidth: 3,\n    cornerSize: 12,\n    parallaxStrength: 0.00005\n  }), []);\n  const moveCursor = useCallback((x, y) => {\n    if (!cursorRef.current) return;\n    gsap.to(cursorRef.current, {\n      x,\n      y,\n      duration: 0.1,\n      ease: 'power3.out'\n    });\n  }, []);\n  useEffect(() => {\n    if (!cursorRef.current) return;\n    const originalCursor = document.body.style.cursor;\n    if (hideDefaultCursor) {\n      document.body.style.cursor = 'none';\n    }\n    const cursor = cursorRef.current;\n    cornersRef.current = cursor.querySelectorAll('.target-cursor-corner');\n    let activeTarget = null;\n    let currentTargetMove = null;\n    let currentLeaveHandler = null;\n    let isAnimatingToTarget = false;\n    let resumeTimeout = null;\n    const cleanupTarget = target => {\n      if (currentTargetMove) {\n        target.removeEventListener('mousemove', currentTargetMove);\n      }\n      if (currentLeaveHandler) {\n        target.removeEventListener('mouseleave', currentLeaveHandler);\n      }\n      currentTargetMove = null;\n      currentLeaveHandler = null;\n    };\n    gsap.set(cursor, {\n      xPercent: -50,\n      yPercent: -50,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2\n    });\n    const createSpinTimeline = () => {\n      if (spinTl.current) {\n        spinTl.current.kill();\n      }\n      spinTl.current = gsap.timeline({\n        repeat: -1\n      }).to(cursor, {\n        rotation: '+=360',\n        duration: spinDuration,\n        ease: 'none'\n      });\n    };\n    createSpinTimeline();\n    const moveHandler = e => moveCursor(e.clientX, e.clientY);\n    window.addEventListener('mousemove', moveHandler);\n    const scrollHandler = () => {\n      if (!activeTarget || !cursorRef.current) return;\n      const mouseX = gsap.getProperty(cursorRef.current, 'x');\n      const mouseY = gsap.getProperty(cursorRef.current, 'y');\n      const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);\n      const isStillOverTarget = elementUnderMouse && (elementUnderMouse === activeTarget || elementUnderMouse.closest(targetSelector) === activeTarget);\n      if (!isStillOverTarget) {\n        if (currentLeaveHandler) {\n          currentLeaveHandler();\n        }\n      }\n    };\n    window.addEventListener('scroll', scrollHandler, {\n      passive: true\n    });\n\n    //---------------------------------------------------------------\n    // This code for onclick animation\n\n    window.addEventListener('mousemove', moveHandler);\n    const mouseDownHandler = () => {\n      if (!dotRef.current) return;\n      gsap.to(dotRef.current, {\n        scale: 0.7,\n        duration: 0.3\n      });\n      gsap.to(cursorRef.current, {\n        scale: 0.9,\n        duration: 0.2\n      });\n    };\n\n    // Animate it back to its original size\n    const mouseUpHandler = () => {\n      if (!dotRef.current) return;\n      gsap.to(dotRef.current, {\n        scale: 1,\n        duration: 0.3\n      });\n      gsap.to(cursorRef.current, {\n        scale: 1,\n        duration: 0.2\n      });\n    };\n    window.addEventListener('mousedown', mouseDownHandler);\n    window.addEventListener('mouseup', mouseUpHandler);\n\n    //----------------------------------------------------------------\n    const enterHandler = e => {\n      var _spinTl$current;\n      const directTarget = e.target;\n      const allTargets = [];\n      let current = directTarget;\n      while (current && current !== document.body) {\n        if (current.matches(targetSelector)) {\n          allTargets.push(current);\n        }\n        current = current.parentElement;\n      }\n      const target = allTargets[0] || null;\n      if (!target || !cursorRef.current || !cornersRef.current) return;\n      if (activeTarget === target) return;\n      if (activeTarget) {\n        cleanupTarget(activeTarget);\n      }\n      if (resumeTimeout) {\n        clearTimeout(resumeTimeout);\n        resumeTimeout = null;\n      }\n      activeTarget = target;\n      const corners = Array.from(cornersRef.current);\n      corners.forEach(corner => {\n        gsap.killTweensOf(corner);\n      });\n      gsap.killTweensOf(cursorRef.current, 'rotation');\n      (_spinTl$current = spinTl.current) === null || _spinTl$current === void 0 ? void 0 : _spinTl$current.pause();\n      gsap.set(cursorRef.current, {\n        rotation: 0\n      });\n      const updateCorners = (mouseX, mouseY) => {\n        const rect = target.getBoundingClientRect();\n        const cursorRect = cursorRef.current.getBoundingClientRect();\n        const cursorCenterX = cursorRect.left + cursorRect.width / 2;\n        const cursorCenterY = cursorRect.top + cursorRect.height / 2;\n        const [tlc, trc, brc, blc] = Array.from(cornersRef.current);\n        const {\n          borderWidth,\n          cornerSize,\n          parallaxStrength\n        } = constants;\n        let tlOffset = {\n          x: rect.left - cursorCenterX - borderWidth,\n          y: rect.top - cursorCenterY - borderWidth\n        };\n        let trOffset = {\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\n          y: rect.top - cursorCenterY - borderWidth\n        };\n        let brOffset = {\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\n        };\n        let blOffset = {\n          x: rect.left - cursorCenterX - borderWidth,\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\n        };\n        if (mouseX !== undefined && mouseY !== undefined) {\n          const targetCenterX = rect.left + rect.width / 2;\n          const targetCenterY = rect.top + rect.height / 2;\n          const mouseOffsetX = (mouseX - targetCenterX) * parallaxStrength;\n          const mouseOffsetY = (mouseY - targetCenterY) * parallaxStrength;\n          tlOffset.x += mouseOffsetX;\n          tlOffset.y += mouseOffsetY;\n          trOffset.x += mouseOffsetX;\n          trOffset.y += mouseOffsetY;\n          brOffset.x += mouseOffsetX;\n          brOffset.y += mouseOffsetY;\n          blOffset.x += mouseOffsetX;\n          blOffset.y += mouseOffsetY;\n        }\n        const tl = gsap.timeline();\n        const corners = [tlc, trc, brc, blc];\n        const offsets = [tlOffset, trOffset, brOffset, blOffset];\n        corners.forEach((corner, index) => {\n          tl.to(corner, {\n            x: offsets[index].x,\n            y: offsets[index].y,\n            duration: 0.2,\n            ease: 'power2.out'\n          }, 0);\n        });\n      };\n      isAnimatingToTarget = true;\n      updateCorners();\n      setTimeout(() => {\n        isAnimatingToTarget = false;\n      }, 1);\n      let moveThrottle = null;\n      const targetMove = ev => {\n        if (moveThrottle || isAnimatingToTarget) return;\n        moveThrottle = requestAnimationFrame(() => {\n          const mouseEvent = ev;\n          updateCorners(mouseEvent.clientX, mouseEvent.clientY);\n          moveThrottle = null;\n        });\n      };\n      const leaveHandler = () => {\n        activeTarget = null;\n        isAnimatingToTarget = false;\n        if (cornersRef.current) {\n          const corners = Array.from(cornersRef.current);\n          gsap.killTweensOf(corners);\n          const {\n            cornerSize\n          } = constants;\n          const positions = [{\n            x: -cornerSize * 1.5,\n            y: -cornerSize * 1.5\n          }, {\n            x: cornerSize * 0.5,\n            y: -cornerSize * 1.5\n          }, {\n            x: cornerSize * 0.5,\n            y: cornerSize * 0.5\n          }, {\n            x: -cornerSize * 1.5,\n            y: cornerSize * 0.5\n          }];\n          const tl = gsap.timeline();\n          corners.forEach((corner, index) => {\n            tl.to(corner, {\n              x: positions[index].x,\n              y: positions[index].y,\n              duration: 0.3,\n              ease: 'power3.out'\n            }, 0);\n          });\n        }\n        resumeTimeout = setTimeout(() => {\n          if (!activeTarget && cursorRef.current && spinTl.current) {\n            const currentRotation = gsap.getProperty(cursorRef.current, 'rotation');\n            const normalizedRotation = currentRotation % 360;\n            spinTl.current.kill();\n            spinTl.current = gsap.timeline({\n              repeat: -1\n            }).to(cursorRef.current, {\n              rotation: '+=360',\n              duration: spinDuration,\n              ease: 'none'\n            });\n            gsap.to(cursorRef.current, {\n              rotation: normalizedRotation + 360,\n              duration: spinDuration * (1 - normalizedRotation / 360),\n              ease: 'none',\n              onComplete: () => {\n                var _spinTl$current2;\n                (_spinTl$current2 = spinTl.current) === null || _spinTl$current2 === void 0 ? void 0 : _spinTl$current2.restart();\n              }\n            });\n          }\n          resumeTimeout = null;\n        }, 50);\n        cleanupTarget(target);\n      };\n      currentTargetMove = targetMove;\n      currentLeaveHandler = leaveHandler;\n      target.addEventListener('mousemove', targetMove);\n      target.addEventListener('mouseleave', leaveHandler);\n    };\n    window.addEventListener('mouseover', enterHandler, {\n      passive: true\n    });\n    return () => {\n      var _spinTl$current3;\n      window.removeEventListener('mousemove', moveHandler);\n      window.removeEventListener('mouseover', enterHandler);\n      window.removeEventListener('scroll', scrollHandler);\n      if (activeTarget) {\n        cleanupTarget(activeTarget);\n      }\n      console.log('Cleaning up TargetCursor');\n      (_spinTl$current3 = spinTl.current) === null || _spinTl$current3 === void 0 ? void 0 : _spinTl$current3.kill();\n      document.body.style.cursor = originalCursor;\n    };\n  }, [targetSelector, spinDuration, moveCursor, constants, hideDefaultCursor]);\n  useEffect(() => {\n    if (!cursorRef.current || !spinTl.current) return;\n    if (spinTl.current.isActive()) {\n      spinTl.current.kill();\n      spinTl.current = gsap.timeline({\n        repeat: -1\n      }).to(cursorRef.current, {\n        rotation: '+=360',\n        duration: spinDuration,\n        ease: 'none'\n      });\n    }\n  }, [spinDuration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cursorRef,\n    className: \"target-cursor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dotRef,\n      className: \"target-cursor-dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-cursor-corner corner-tl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-cursor-corner corner-tr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-cursor-corner corner-br\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-cursor-corner corner-bl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n_s(TargetCursor, \"GYx0BFN0E5I3KTy9Yvi1M5bRuDY=\");\n_c = TargetCursor;\nexport default TargetCursor;\nvar _c;\n$RefreshReg$(_c, \"TargetCursor\");","map":{"version":3,"names":["useEffect","useRef","useCallback","useMemo","gsap","jsxDEV","_jsxDEV","TargetCursor","targetSelector","spinDuration","hideDefaultCursor","_s","cursorRef","cornersRef","spinTl","dotRef","constants","borderWidth","cornerSize","parallaxStrength","moveCursor","x","y","current","to","duration","ease","originalCursor","document","body","style","cursor","querySelectorAll","activeTarget","currentTargetMove","currentLeaveHandler","isAnimatingToTarget","resumeTimeout","cleanupTarget","target","removeEventListener","set","xPercent","yPercent","window","innerWidth","innerHeight","createSpinTimeline","kill","timeline","repeat","rotation","moveHandler","e","clientX","clientY","addEventListener","scrollHandler","mouseX","getProperty","mouseY","elementUnderMouse","elementFromPoint","isStillOverTarget","closest","passive","mouseDownHandler","scale","mouseUpHandler","enterHandler","_spinTl$current","directTarget","allTargets","matches","push","parentElement","clearTimeout","corners","Array","from","forEach","corner","killTweensOf","pause","updateCorners","rect","getBoundingClientRect","cursorRect","cursorCenterX","left","width","cursorCenterY","top","height","tlc","trc","brc","blc","tlOffset","trOffset","right","brOffset","bottom","blOffset","undefined","targetCenterX","targetCenterY","mouseOffsetX","mouseOffsetY","tl","offsets","index","setTimeout","moveThrottle","targetMove","ev","requestAnimationFrame","mouseEvent","leaveHandler","positions","currentRotation","normalizedRotation","onComplete","_spinTl$current2","restart","_spinTl$current3","console","log","isActive","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/georg/projects/Fullstack/portofolio-2.0/client/src/components/TargetCursor.jsx"],"sourcesContent":["import { useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './TargetCursor.css';\r\n\r\nconst TargetCursor = ({ targetSelector = '.cursor-target', spinDuration = 2, hideDefaultCursor = true }) => {\r\n  const cursorRef = useRef(null);\r\n  const cornersRef = useRef(null);\r\n  const spinTl = useRef(null);\r\n  const dotRef = useRef(null);\r\n  const constants = useMemo(\r\n    () => ({\r\n      borderWidth: 3,\r\n      cornerSize: 12,\r\n      parallaxStrength: 0.00005\r\n    }),\r\n    []\r\n  );\r\n\r\n  const moveCursor = useCallback((x, y) => {\r\n    if (!cursorRef.current) return;\r\n    gsap.to(cursorRef.current, {\r\n      x,\r\n      y,\r\n      duration: 0.1,\r\n      ease: 'power3.out'\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current) return;\r\n\r\n    const originalCursor = document.body.style.cursor;\r\n    if (hideDefaultCursor) {\r\n      document.body.style.cursor = 'none';\r\n    }\r\n\r\n    const cursor = cursorRef.current;\r\n    cornersRef.current = cursor.querySelectorAll('.target-cursor-corner');\r\n\r\n    let activeTarget = null;\r\n    let currentTargetMove = null;\r\n    let currentLeaveHandler = null;\r\n    let isAnimatingToTarget = false;\r\n    let resumeTimeout = null;\r\n\r\n    const cleanupTarget = target => {\r\n      if (currentTargetMove) {\r\n        target.removeEventListener('mousemove', currentTargetMove);\r\n      }\r\n      if (currentLeaveHandler) {\r\n        target.removeEventListener('mouseleave', currentLeaveHandler);\r\n      }\r\n      currentTargetMove = null;\r\n      currentLeaveHandler = null;\r\n    };\r\n\r\n    gsap.set(cursor, {\r\n      xPercent: -50,\r\n      yPercent: -50,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight / 2\r\n    });\r\n\r\n    const createSpinTimeline = () => {\r\n      if (spinTl.current) {\r\n        spinTl.current.kill();\r\n      }\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursor, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    };\r\n\r\n    createSpinTimeline();\r\n\r\n    const moveHandler = e => moveCursor(e.clientX, e.clientY);\r\n    window.addEventListener('mousemove', moveHandler);\r\n\r\n    const scrollHandler = () => {\r\n      if (!activeTarget || !cursorRef.current) return;\r\n\r\n      const mouseX = gsap.getProperty(cursorRef.current, 'x');\r\n      const mouseY = gsap.getProperty(cursorRef.current, 'y');\r\n\r\n      const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);\r\n      const isStillOverTarget =\r\n        elementUnderMouse &&\r\n        (elementUnderMouse === activeTarget || elementUnderMouse.closest(targetSelector) === activeTarget);\r\n\r\n      if (!isStillOverTarget) {\r\n        if (currentLeaveHandler) {\r\n          currentLeaveHandler();\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', scrollHandler, { passive: true });\r\n\r\n    //---------------------------------------------------------------\r\n    // This code for onclick animation\r\n\r\n    window.addEventListener('mousemove', moveHandler);\r\n    const mouseDownHandler = () => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 0.7, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 0.9, duration: 0.2 });\r\n    };\r\n\r\n    // Animate it back to its original size\r\n    const mouseUpHandler = () => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 1, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 1, duration: 0.2 });\r\n    };\r\n\r\n    window.addEventListener('mousedown', mouseDownHandler);\r\n    window.addEventListener('mouseup', mouseUpHandler);\r\n\r\n    //----------------------------------------------------------------\r\n    const enterHandler = e => {\r\n      const directTarget = e.target;\r\n\r\n      const allTargets = [];\r\n      let current = directTarget;\r\n      while (current && current !== document.body) {\r\n        if (current.matches(targetSelector)) {\r\n          allTargets.push(current);\r\n        }\r\n        current = current.parentElement;\r\n      }\r\n\r\n      const target = allTargets[0] || null;\r\n      if (!target || !cursorRef.current || !cornersRef.current) return;\r\n\r\n      if (activeTarget === target) return;\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      if (resumeTimeout) {\r\n        clearTimeout(resumeTimeout);\r\n        resumeTimeout = null;\r\n      }\r\n\r\n      activeTarget = target;\r\n      const corners = Array.from(cornersRef.current);\r\n      corners.forEach(corner => {\r\n        gsap.killTweensOf(corner);\r\n      });\r\n\r\n      gsap.killTweensOf(cursorRef.current, 'rotation');\r\n      spinTl.current?.pause();\r\n\r\n      gsap.set(cursorRef.current, { rotation: 0 });\r\n\r\n      const updateCorners = (mouseX, mouseY) => {\r\n        const rect = target.getBoundingClientRect();\r\n        const cursorRect = cursorRef.current.getBoundingClientRect();\r\n\r\n        const cursorCenterX = cursorRect.left + cursorRect.width / 2;\r\n        const cursorCenterY = cursorRect.top + cursorRect.height / 2;\r\n\r\n        const [tlc, trc, brc, blc] = Array.from(cornersRef.current);\r\n\r\n        const { borderWidth, cornerSize, parallaxStrength } = constants;\r\n\r\n        let tlOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let trOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let brOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n        let blOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n\r\n        if (mouseX !== undefined && mouseY !== undefined) {\r\n          const targetCenterX = rect.left + rect.width / 2;\r\n          const targetCenterY = rect.top + rect.height / 2;\r\n          const mouseOffsetX = (mouseX - targetCenterX) * parallaxStrength;\r\n          const mouseOffsetY = (mouseY - targetCenterY) * parallaxStrength;\r\n\r\n          tlOffset.x += mouseOffsetX;\r\n          tlOffset.y += mouseOffsetY;\r\n          trOffset.x += mouseOffsetX;\r\n          trOffset.y += mouseOffsetY;\r\n          brOffset.x += mouseOffsetX;\r\n          brOffset.y += mouseOffsetY;\r\n          blOffset.x += mouseOffsetX;\r\n          blOffset.y += mouseOffsetY;\r\n        }\r\n\r\n        const tl = gsap.timeline();\r\n        const corners = [tlc, trc, brc, blc];\r\n        const offsets = [tlOffset, trOffset, brOffset, blOffset];\r\n\r\n        corners.forEach((corner, index) => {\r\n          tl.to(\r\n            corner,\r\n            {\r\n              x: offsets[index].x,\r\n              y: offsets[index].y,\r\n              duration: 0.2,\r\n              ease: 'power2.out'\r\n            },\r\n            0\r\n          );\r\n        });\r\n      };\r\n\r\n      isAnimatingToTarget = true;\r\n      updateCorners();\r\n\r\n      setTimeout(() => {\r\n        isAnimatingToTarget = false;\r\n      }, 1);\r\n\r\n      let moveThrottle = null;\r\n      const targetMove = ev => {\r\n        if (moveThrottle || isAnimatingToTarget) return;\r\n        moveThrottle = requestAnimationFrame(() => {\r\n          const mouseEvent = ev;\r\n          updateCorners(mouseEvent.clientX, mouseEvent.clientY);\r\n          moveThrottle = null;\r\n        });\r\n      };\r\n\r\n      const leaveHandler = () => {\r\n        activeTarget = null;\r\n        isAnimatingToTarget = false;\r\n\r\n        if (cornersRef.current) {\r\n          const corners = Array.from(cornersRef.current);\r\n          gsap.killTweensOf(corners);\r\n\r\n          const { cornerSize } = constants;\r\n          const positions = [\r\n            { x: -cornerSize * 1.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: cornerSize * 0.5 },\r\n            { x: -cornerSize * 1.5, y: cornerSize * 0.5 }\r\n          ];\r\n\r\n          const tl = gsap.timeline();\r\n          corners.forEach((corner, index) => {\r\n            tl.to(\r\n              corner,\r\n              {\r\n                x: positions[index].x,\r\n                y: positions[index].y,\r\n                duration: 0.3,\r\n                ease: 'power3.out'\r\n              },\r\n              0\r\n            );\r\n          });\r\n        }\r\n\r\n        resumeTimeout = setTimeout(() => {\r\n          if (!activeTarget && cursorRef.current && spinTl.current) {\r\n            const currentRotation = gsap.getProperty(cursorRef.current, 'rotation');\r\n            const normalizedRotation = currentRotation % 360;\r\n\r\n            spinTl.current.kill();\r\n            spinTl.current = gsap\r\n              .timeline({ repeat: -1 })\r\n              .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n\r\n            gsap.to(cursorRef.current, {\r\n              rotation: normalizedRotation + 360,\r\n              duration: spinDuration * (1 - normalizedRotation / 360),\r\n              ease: 'none',\r\n              onComplete: () => {\r\n                spinTl.current?.restart();\r\n              }\r\n            });\r\n          }\r\n          resumeTimeout = null;\r\n        }, 50);\r\n\r\n        cleanupTarget(target);\r\n      };\r\n\r\n      currentTargetMove = targetMove;\r\n      currentLeaveHandler = leaveHandler;\r\n\r\n      target.addEventListener('mousemove', targetMove);\r\n      target.addEventListener('mouseleave', leaveHandler);\r\n    };\r\n\r\n    window.addEventListener('mouseover', enterHandler, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', moveHandler);\r\n      window.removeEventListener('mouseover', enterHandler);\r\n      window.removeEventListener('scroll', scrollHandler);\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      console.log('Cleaning up TargetCursor');\r\n\r\n      spinTl.current?.kill();\r\n      document.body.style.cursor = originalCursor;\r\n    };\r\n  }, [targetSelector, spinDuration, moveCursor, constants, hideDefaultCursor]);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current || !spinTl.current) return;\r\n\r\n    if (spinTl.current.isActive()) {\r\n      spinTl.current.kill();\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    }\r\n  }, [spinDuration]);\r\n\r\n  return (\r\n    <div ref={cursorRef} className=\"target-cursor-wrapper\">\r\n      <div ref={dotRef} className=\"target-cursor-dot\" />\r\n      <div className=\"target-cursor-corner corner-tl\" />\r\n      <div className=\"target-cursor-corner corner-tr\" />\r\n      <div className=\"target-cursor-corner corner-br\" />\r\n      <div className=\"target-cursor-corner corner-bl\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TargetCursor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}