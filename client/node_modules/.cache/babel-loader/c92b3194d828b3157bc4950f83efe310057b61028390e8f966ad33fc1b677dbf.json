{"ast":null,"code":"var _s = $RefreshSig$();\n// components/useScrollSnap.js\nimport { useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\ngsap.registerPlugin(ScrollToPlugin);\nexport default function useScrollSnap({\n  selector = \"section\",\n  duration = 0.8,\n  deadZone = 0.2,\n  delayBetweenSnaps = 400 // ms cooldown\n}) {\n  _s();\n  useEffect(() => {\n    const sections = Array.from(document.querySelectorAll(selector));\n    let currentIndex = 0;\n    let isAnimating = false;\n    let lastSnap = 0;\n    const goToSection = index => {\n      if (index < 0 || index >= sections.length) return;\n      isAnimating = true;\n      currentIndex = index;\n      gsap.to(window, {\n        scrollTo: sections[index].offsetTop,\n        duration,\n        ease: \"power2.out\",\n        onComplete: () => {\n          isAnimating = false;\n          lastSnap = Date.now();\n        }\n      });\n    };\n    const onWheel = e => {\n      if (isAnimating) return;\n\n      // throttle rapid scroll\n      if (Date.now() - lastSnap < delayBetweenSnaps) return;\n      const delta = e.deltaY;\n      if (delta > 0) {\n        // scroll down\n        goToSection(currentIndex + 1);\n      } else if (delta < 0) {\n        // scroll up\n        goToSection(currentIndex - 1);\n      }\n    };\n\n    // initialise index to current section\n    const scrollY = window.scrollY;\n    for (let i = 0; i < sections.length; i++) {\n      if (scrollY >= sections[i].offsetTop) currentIndex = i;\n    }\n    window.addEventListener(\"wheel\", onWheel, {\n      passive: false\n    });\n    return () => {\n      window.removeEventListener(\"wheel\", onWheel);\n    };\n  }, [selector, duration, deadZone, delayBetweenSnaps]);\n}\n_s(useScrollSnap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useRef","gsap","ScrollToPlugin","registerPlugin","useScrollSnap","selector","duration","deadZone","delayBetweenSnaps","_s","sections","Array","from","document","querySelectorAll","currentIndex","isAnimating","lastSnap","goToSection","index","length","to","window","scrollTo","offsetTop","ease","onComplete","Date","now","onWheel","e","delta","deltaY","scrollY","i","addEventListener","passive","removeEventListener"],"sources":["C:/Users/georg/projects/Fullstack/portofolio-2.0/client/src/components/useScrollSnap.js"],"sourcesContent":["// components/useScrollSnap.js\r\nimport { useEffect, useRef } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\r\n\r\ngsap.registerPlugin(ScrollToPlugin);\r\n\r\nexport default function useScrollSnap({\r\n  selector = \"section\",\r\n  duration = 0.8,\r\n  deadZone = 0.2,\r\n  delayBetweenSnaps = 400 // ms cooldown\r\n}) {\r\n  useEffect(() => {\r\n    const sections = Array.from(document.querySelectorAll(selector));\r\n    let currentIndex = 0;\r\n    let isAnimating = false;\r\n    let lastSnap = 0;\r\n\r\n    const goToSection = (index) => {\r\n      if (index < 0 || index >= sections.length) return;\r\n      isAnimating = true;\r\n      currentIndex = index;\r\n      gsap.to(window, {\r\n        scrollTo: sections[index].offsetTop,\r\n        duration,\r\n        ease: \"power2.out\",\r\n        onComplete: () => {\r\n          isAnimating = false;\r\n          lastSnap = Date.now();\r\n        }\r\n      });\r\n    };\r\n\r\n    const onWheel = (e) => {\r\n      if (isAnimating) return;\r\n\r\n      // throttle rapid scroll\r\n      if (Date.now() - lastSnap < delayBetweenSnaps) return;\r\n\r\n      const delta = e.deltaY;\r\n      if (delta > 0) {\r\n        // scroll down\r\n        goToSection(currentIndex + 1);\r\n      } else if (delta < 0) {\r\n        // scroll up\r\n        goToSection(currentIndex - 1);\r\n      }\r\n    };\r\n\r\n    // initialise index to current section\r\n    const scrollY = window.scrollY;\r\n    for (let i = 0; i < sections.length; i++) {\r\n      if (scrollY >= sections[i].offsetTop) currentIndex = i;\r\n    }\r\n\r\n    window.addEventListener(\"wheel\", onWheel, { passive: false });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", onWheel);\r\n    };\r\n  }, [selector, duration, deadZone, delayBetweenSnaps]);\r\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,cAAc,QAAQ,qBAAqB;AAEpDD,IAAI,CAACE,cAAc,CAACD,cAAc,CAAC;AAEnC,eAAe,SAASE,aAAaA,CAAC;EACpCC,QAAQ,GAAG,SAAS;EACpBC,QAAQ,GAAG,GAAG;EACdC,QAAQ,GAAG,GAAG;EACdC,iBAAiB,GAAG,GAAG,CAAC;AAC1B,CAAC,EAAE;EAAAC,EAAA;EACDV,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAACT,QAAQ,CAAC,CAAC;IAChE,IAAIU,YAAY,GAAG,CAAC;IACpB,IAAIC,WAAW,GAAG,KAAK;IACvB,IAAIC,QAAQ,GAAG,CAAC;IAEhB,MAAMC,WAAW,GAAIC,KAAK,IAAK;MAC7B,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIT,QAAQ,CAACU,MAAM,EAAE;MAC3CJ,WAAW,GAAG,IAAI;MAClBD,YAAY,GAAGI,KAAK;MACpBlB,IAAI,CAACoB,EAAE,CAACC,MAAM,EAAE;QACdC,QAAQ,EAAEb,QAAQ,CAACS,KAAK,CAAC,CAACK,SAAS;QACnClB,QAAQ;QACRmB,IAAI,EAAE,YAAY;QAClBC,UAAU,EAAEA,CAAA,KAAM;UAChBV,WAAW,GAAG,KAAK;UACnBC,QAAQ,GAAGU,IAAI,CAACC,GAAG,CAAC,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,OAAO,GAAIC,CAAC,IAAK;MACrB,IAAId,WAAW,EAAE;;MAEjB;MACA,IAAIW,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGX,QAAQ,GAAGT,iBAAiB,EAAE;MAE/C,MAAMuB,KAAK,GAAGD,CAAC,CAACE,MAAM;MACtB,IAAID,KAAK,GAAG,CAAC,EAAE;QACb;QACAb,WAAW,CAACH,YAAY,GAAG,CAAC,CAAC;MAC/B,CAAC,MAAM,IAAIgB,KAAK,GAAG,CAAC,EAAE;QACpB;QACAb,WAAW,CAACH,YAAY,GAAG,CAAC,CAAC;MAC/B;IACF,CAAC;;IAED;IACA,MAAMkB,OAAO,GAAGX,MAAM,CAACW,OAAO;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,QAAQ,CAACU,MAAM,EAAEc,CAAC,EAAE,EAAE;MACxC,IAAID,OAAO,IAAIvB,QAAQ,CAACwB,CAAC,CAAC,CAACV,SAAS,EAAET,YAAY,GAAGmB,CAAC;IACxD;IAEAZ,MAAM,CAACa,gBAAgB,CAAC,OAAO,EAAEN,OAAO,EAAE;MAAEO,OAAO,EAAE;IAAM,CAAC,CAAC;IAE7D,OAAO,MAAM;MACXd,MAAM,CAACe,mBAAmB,CAAC,OAAO,EAAER,OAAO,CAAC;IAC9C,CAAC;EACH,CAAC,EAAE,CAACxB,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,iBAAiB,CAAC,CAAC;AACvD;AAACC,EAAA,CAvDuBL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}