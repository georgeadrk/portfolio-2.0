{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useScrollSnap.js\nimport { useEffect } from \"react\";\n\n/**\r\n * Custom hook for scroll snapping.\r\n * @param {string} selector - CSS selector for snap targets.\r\n * @param {number} duration - Scroll duration (ms).\r\n * @param {number} offset - Offset in px (positive pushes down).\r\n */\nexport default function useScrollSnap(selector = \"section\", duration = 500, offset = 0) {\n  _s();\n  useEffect(() => {\n    const targets = document.querySelectorAll(selector);\n    if (!targets.length) return;\n    let isScrolling = false;\n    let timeout;\n    function snapScroll() {\n      if (isScrolling) return;\n\n      // find the closest element\n      const currentScroll = window.scrollY;\n      const viewportHeight = window.innerHeight;\n      let closestEl = null;\n      let closestDist = Infinity;\n      targets.forEach(el => {\n        const elTop = el.getBoundingClientRect().top + window.scrollY;\n        const dist = Math.abs(elTop - currentScroll);\n        if (dist < closestDist) {\n          closestDist = dist;\n          closestEl = el;\n        }\n      });\n      if (closestEl) {\n        isScrolling = true;\n        window.scrollTo({\n          top: closestEl.offsetTop + offset,\n          behavior: \"smooth\"\n        });\n\n        // after the duration, allow scrolling again\n        timeout = setTimeout(() => {\n          isScrolling = false;\n        }, duration);\n      }\n    }\n\n    // listen to scroll stop\n    let scrollTimeout;\n    const onScroll = () => {\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        snapScroll();\n      }, 60); // wait for scroll stop\n    };\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n      clearTimeout(timeout);\n    };\n  }, [selector, duration, offset]);\n}\n_s(useScrollSnap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","useScrollSnap","selector","duration","offset","_s","targets","document","querySelectorAll","length","isScrolling","timeout","snapScroll","currentScroll","window","scrollY","viewportHeight","innerHeight","closestEl","closestDist","Infinity","forEach","el","elTop","getBoundingClientRect","top","dist","Math","abs","scrollTo","offsetTop","behavior","setTimeout","scrollTimeout","onScroll","clearTimeout","addEventListener","removeEventListener"],"sources":["C:/Users/georg/projects/Fullstack/portofolio-2.0/client/src/components/useScrollSnap.js"],"sourcesContent":["// src/hooks/useScrollSnap.js\r\nimport { useEffect } from \"react\";\r\n\r\n/**\r\n * Custom hook for scroll snapping.\r\n * @param {string} selector - CSS selector for snap targets.\r\n * @param {number} duration - Scroll duration (ms).\r\n * @param {number} offset - Offset in px (positive pushes down).\r\n */\r\nexport default function useScrollSnap(selector = \"section\", duration = 500, offset = 0) {\r\n  useEffect(() => {\r\n    const targets = document.querySelectorAll(selector);\r\n    if (!targets.length) return;\r\n\r\n    let isScrolling = false;\r\n    let timeout;\r\n\r\n    function snapScroll() {\r\n      if (isScrolling) return;\r\n\r\n      // find the closest element\r\n      const currentScroll = window.scrollY;\r\n      const viewportHeight = window.innerHeight;\r\n\r\n      let closestEl = null;\r\n      let closestDist = Infinity;\r\n\r\n      targets.forEach((el) => {\r\n        const elTop = el.getBoundingClientRect().top + window.scrollY;\r\n        const dist = Math.abs(elTop - currentScroll);\r\n        if (dist < closestDist) {\r\n          closestDist = dist;\r\n          closestEl = el;\r\n        }\r\n      });\r\n\r\n      if (closestEl) {\r\n        isScrolling = true;\r\n        window.scrollTo({\r\n          top: closestEl.offsetTop + offset,\r\n          behavior: \"smooth\",\r\n        });\r\n\r\n        // after the duration, allow scrolling again\r\n        timeout = setTimeout(() => {\r\n          isScrolling = false;\r\n        }, duration);\r\n      }\r\n    }\r\n\r\n    // listen to scroll stop\r\n    let scrollTimeout;\r\n    const onScroll = () => {\r\n      clearTimeout(scrollTimeout);\r\n      scrollTimeout = setTimeout(() => {\r\n        snapScroll();\r\n      }, 60); // wait for scroll stop\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", onScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [selector, duration, offset]);\r\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAaA,CAACC,QAAQ,GAAG,SAAS,EAAEC,QAAQ,GAAG,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAE;EAAAC,EAAA;EACtFL,SAAS,CAAC,MAAM;IACd,MAAMM,OAAO,GAAGC,QAAQ,CAACC,gBAAgB,CAACN,QAAQ,CAAC;IACnD,IAAI,CAACI,OAAO,CAACG,MAAM,EAAE;IAErB,IAAIC,WAAW,GAAG,KAAK;IACvB,IAAIC,OAAO;IAEX,SAASC,UAAUA,CAAA,EAAG;MACpB,IAAIF,WAAW,EAAE;;MAEjB;MACA,MAAMG,aAAa,GAAGC,MAAM,CAACC,OAAO;MACpC,MAAMC,cAAc,GAAGF,MAAM,CAACG,WAAW;MAEzC,IAAIC,SAAS,GAAG,IAAI;MACpB,IAAIC,WAAW,GAAGC,QAAQ;MAE1Bd,OAAO,CAACe,OAAO,CAAEC,EAAE,IAAK;QACtB,MAAMC,KAAK,GAAGD,EAAE,CAACE,qBAAqB,CAAC,CAAC,CAACC,GAAG,GAAGX,MAAM,CAACC,OAAO;QAC7D,MAAMW,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,GAAGV,aAAa,CAAC;QAC5C,IAAIa,IAAI,GAAGP,WAAW,EAAE;UACtBA,WAAW,GAAGO,IAAI;UAClBR,SAAS,GAAGI,EAAE;QAChB;MACF,CAAC,CAAC;MAEF,IAAIJ,SAAS,EAAE;QACbR,WAAW,GAAG,IAAI;QAClBI,MAAM,CAACe,QAAQ,CAAC;UACdJ,GAAG,EAAEP,SAAS,CAACY,SAAS,GAAG1B,MAAM;UACjC2B,QAAQ,EAAE;QACZ,CAAC,CAAC;;QAEF;QACApB,OAAO,GAAGqB,UAAU,CAAC,MAAM;UACzBtB,WAAW,GAAG,KAAK;QACrB,CAAC,EAAEP,QAAQ,CAAC;MACd;IACF;;IAEA;IACA,IAAI8B,aAAa;IACjB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrBC,YAAY,CAACF,aAAa,CAAC;MAC3BA,aAAa,GAAGD,UAAU,CAAC,MAAM;QAC/BpB,UAAU,CAAC,CAAC;MACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACV,CAAC;IAEDE,MAAM,CAACsB,gBAAgB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IAE3C,OAAO,MAAM;MACXpB,MAAM,CAACuB,mBAAmB,CAAC,QAAQ,EAAEH,QAAQ,CAAC;MAC9CC,YAAY,CAACxB,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACT,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,CAAC,CAAC;AAClC;AAACC,EAAA,CAzDuBJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}