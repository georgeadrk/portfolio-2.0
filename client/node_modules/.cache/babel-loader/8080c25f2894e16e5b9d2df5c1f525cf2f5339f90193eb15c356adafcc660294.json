{"ast":null,"code":"var _s = $RefreshSig$();\n// components/useScrollSnap.js\nimport { useEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\ngsap.registerPlugin(ScrollToPlugin);\nexport default function useScrollSnap({\n  selector = \"section\",\n  duration = 0.8,\n  deadZone = 0.2\n}) {\n  _s();\n  useEffect(() => {\n    let timeout;\n    let isAnimating = false;\n    const sections = Array.from(document.querySelectorAll(selector));\n    const scrollToY = y => {\n      isAnimating = true;\n      gsap.to(window, {\n        scrollTo: y,\n        duration,\n        ease: \"power2.out\",\n        onComplete: () => isAnimating = false\n      });\n    };\n    const onScroll = () => {\n      if (isAnimating) return;\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        const scrollY = window.scrollY;\n        const viewportHeight = window.innerHeight;\n        const viewportCenter = scrollY + viewportHeight / 2;\n\n        // find the section whose center is closest to viewport center\n        let closest = null;\n        let closestDist = Infinity;\n        sections.forEach((el, idx) => {\n          const elTop = el.offsetTop;\n          const elHeight = el.offsetHeight;\n          const elBottom = elTop + elHeight;\n\n          // If section taller than viewport, let the dead zone pass through\n          const deadZoneTop = elTop + elHeight * deadZone;\n          const deadZoneBottom = elBottom - elHeight * deadZone;\n          if (elHeight > viewportHeight && scrollY > deadZoneTop && scrollY < deadZoneBottom) {\n            return; // skip snapping while in dead zone\n          }\n          const sectionCenter = elTop + elHeight / 2;\n          const dist = Math.abs(viewportCenter - sectionCenter);\n          if (dist < closestDist) {\n            closestDist = dist;\n            closest = el;\n          }\n        });\n        if (closest) {\n          scrollToY(closest.offsetTop);\n        }\n      }, 200);\n    };\n    window.addEventListener(\"scroll\", onScroll);\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [selector, duration, deadZone]);\n}\n_s(useScrollSnap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","gsap","ScrollToPlugin","registerPlugin","useScrollSnap","selector","duration","deadZone","_s","timeout","isAnimating","sections","Array","from","document","querySelectorAll","scrollToY","y","to","window","scrollTo","ease","onComplete","onScroll","clearTimeout","setTimeout","scrollY","viewportHeight","innerHeight","viewportCenter","closest","closestDist","Infinity","forEach","el","idx","elTop","offsetTop","elHeight","offsetHeight","elBottom","deadZoneTop","deadZoneBottom","sectionCenter","dist","Math","abs","addEventListener","removeEventListener"],"sources":["C:/Users/georg/projects/Fullstack/portofolio-2.0/client/src/components/useScrollSnap.js"],"sourcesContent":["// components/useScrollSnap.js\r\nimport { useEffect } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\r\n\r\ngsap.registerPlugin(ScrollToPlugin);\r\n\r\nexport default function useScrollSnap({\r\n  selector = \"section\",\r\n  duration = 0.8,\r\n  deadZone = 0.2\r\n}) {\r\n  useEffect(() => {\r\n    let timeout;\r\n    let isAnimating = false;\r\n    const sections = Array.from(document.querySelectorAll(selector));\r\n\r\n    const scrollToY = (y) => {\r\n      isAnimating = true;\r\n      gsap.to(window, {\r\n        scrollTo: y,\r\n        duration,\r\n        ease: \"power2.out\",\r\n        onComplete: () => (isAnimating = false)\r\n      });\r\n    };\r\n\r\n    const onScroll = () => {\r\n      if (isAnimating) return;\r\n\r\n      if (timeout) clearTimeout(timeout);\r\n\r\n      timeout = setTimeout(() => {\r\n        const scrollY = window.scrollY;\r\n        const viewportHeight = window.innerHeight;\r\n        const viewportCenter = scrollY + viewportHeight / 2;\r\n\r\n        // find the section whose center is closest to viewport center\r\n        let closest = null;\r\n        let closestDist = Infinity;\r\n\r\n        sections.forEach((el, idx) => {\r\n          const elTop = el.offsetTop;\r\n          const elHeight = el.offsetHeight;\r\n          const elBottom = elTop + elHeight;\r\n\r\n          // If section taller than viewport, let the dead zone pass through\r\n          const deadZoneTop = elTop + elHeight * deadZone;\r\n          const deadZoneBottom = elBottom - elHeight * deadZone;\r\n          if (elHeight > viewportHeight && scrollY > deadZoneTop && scrollY < deadZoneBottom) {\r\n            return; // skip snapping while in dead zone\r\n          }\r\n\r\n          const sectionCenter = elTop + elHeight / 2;\r\n          const dist = Math.abs(viewportCenter - sectionCenter);\r\n          if (dist < closestDist) {\r\n            closestDist = dist;\r\n            closest = el;\r\n          }\r\n        });\r\n\r\n        if (closest) {\r\n          scrollToY(closest.offsetTop);\r\n        }\r\n      }, 200);\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => window.removeEventListener(\"scroll\", onScroll);\r\n  }, [selector, duration, deadZone]);\r\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,cAAc,QAAQ,qBAAqB;AAEpDD,IAAI,CAACE,cAAc,CAACD,cAAc,CAAC;AAEnC,eAAe,SAASE,aAAaA,CAAC;EACpCC,QAAQ,GAAG,SAAS;EACpBC,QAAQ,GAAG,GAAG;EACdC,QAAQ,GAAG;AACb,CAAC,EAAE;EAAAC,EAAA;EACDR,SAAS,CAAC,MAAM;IACd,IAAIS,OAAO;IACX,IAAIC,WAAW,GAAG,KAAK;IACvB,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAACV,QAAQ,CAAC,CAAC;IAEhE,MAAMW,SAAS,GAAIC,CAAC,IAAK;MACvBP,WAAW,GAAG,IAAI;MAClBT,IAAI,CAACiB,EAAE,CAACC,MAAM,EAAE;QACdC,QAAQ,EAAEH,CAAC;QACXX,QAAQ;QACRe,IAAI,EAAE,YAAY;QAClBC,UAAU,EAAEA,CAAA,KAAOZ,WAAW,GAAG;MACnC,CAAC,CAAC;IACJ,CAAC;IAED,MAAMa,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIb,WAAW,EAAE;MAEjB,IAAID,OAAO,EAAEe,YAAY,CAACf,OAAO,CAAC;MAElCA,OAAO,GAAGgB,UAAU,CAAC,MAAM;QACzB,MAAMC,OAAO,GAAGP,MAAM,CAACO,OAAO;QAC9B,MAAMC,cAAc,GAAGR,MAAM,CAACS,WAAW;QACzC,MAAMC,cAAc,GAAGH,OAAO,GAAGC,cAAc,GAAG,CAAC;;QAEnD;QACA,IAAIG,OAAO,GAAG,IAAI;QAClB,IAAIC,WAAW,GAAGC,QAAQ;QAE1BrB,QAAQ,CAACsB,OAAO,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;UAC5B,MAAMC,KAAK,GAAGF,EAAE,CAACG,SAAS;UAC1B,MAAMC,QAAQ,GAAGJ,EAAE,CAACK,YAAY;UAChC,MAAMC,QAAQ,GAAGJ,KAAK,GAAGE,QAAQ;;UAEjC;UACA,MAAMG,WAAW,GAAGL,KAAK,GAAGE,QAAQ,GAAG/B,QAAQ;UAC/C,MAAMmC,cAAc,GAAGF,QAAQ,GAAGF,QAAQ,GAAG/B,QAAQ;UACrD,IAAI+B,QAAQ,GAAGX,cAAc,IAAID,OAAO,GAAGe,WAAW,IAAIf,OAAO,GAAGgB,cAAc,EAAE;YAClF,OAAO,CAAC;UACV;UAEA,MAAMC,aAAa,GAAGP,KAAK,GAAGE,QAAQ,GAAG,CAAC;UAC1C,MAAMM,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACjB,cAAc,GAAGc,aAAa,CAAC;UACrD,IAAIC,IAAI,GAAGb,WAAW,EAAE;YACtBA,WAAW,GAAGa,IAAI;YAClBd,OAAO,GAAGI,EAAE;UACd;QACF,CAAC,CAAC;QAEF,IAAIJ,OAAO,EAAE;UACXd,SAAS,CAACc,OAAO,CAACO,SAAS,CAAC;QAC9B;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC;IAEDlB,MAAM,CAAC4B,gBAAgB,CAAC,QAAQ,EAAExB,QAAQ,CAAC;IAC3C,OAAO,MAAMJ,MAAM,CAAC6B,mBAAmB,CAAC,QAAQ,EAAEzB,QAAQ,CAAC;EAC7D,CAAC,EAAE,CAAClB,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;AACpC;AAACC,EAAA,CA/DuBJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}